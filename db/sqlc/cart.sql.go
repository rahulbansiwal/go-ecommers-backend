// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: cart.sql

package sqlc

import (
	"context"
)

const createCart = `-- name: CreateCart :one
INSERT INTO cart(
    username
)
values ($1)
RETURNING username, id, total_value
`

func (q *Queries) CreateCart(ctx context.Context, username string) (Cart, error) {
	row := q.db.QueryRowContext(ctx, createCart, username)
	var i Cart
	err := row.Scan(&i.Username, &i.ID, &i.TotalValue)
	return i, err
}

const getCart = `-- name: GetCart :one
SELECT username, id, total_value FROM cart 
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetCart(ctx context.Context, username string) (Cart, error) {
	row := q.db.QueryRowContext(ctx, getCart, username)
	var i Cart
	err := row.Scan(&i.Username, &i.ID, &i.TotalValue)
	return i, err
}

const updateCartAmount = `-- name: UpdateCartAmount :one
UPDATE cart
SET
    total_value = $1
WHERE username = $2
RETURNING username, id, total_value
`

type UpdateCartAmountParams struct {
	TotalValue int32  `json:"total_value"`
	Username   string `json:"username"`
}

func (q *Queries) UpdateCartAmount(ctx context.Context, arg UpdateCartAmountParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, updateCartAmount, arg.TotalValue, arg.Username)
	var i Cart
	err := row.Scan(&i.Username, &i.ID, &i.TotalValue)
	return i, err
}
