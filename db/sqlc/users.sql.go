// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    username,hashed_password,full_name,mobile_number
)
values($1,$2,$3,$4)
RETURNING username, hashed_password, full_name, mobile_number, password_changed_at, is_email_verified, created_at
`

type CreateUserParams struct {
	Username       string        `json:"username"`
	HashedPassword string        `json:"hashed_password"`
	FullName       string        `json:"full_name"`
	MobileNumber   sql.NullInt64 `json:"mobile_number"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.MobileNumber,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.MobileNumber,
		&i.PasswordChangedAt,
		&i.IsEmailVerified,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, hashed_password, full_name, mobile_number, password_changed_at, is_email_verified, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.MobileNumber,
		&i.PasswordChangedAt,
		&i.IsEmailVerified,
		&i.CreatedAt,
	)
	return i, err
}
